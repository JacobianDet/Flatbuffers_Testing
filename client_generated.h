// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENT_CROSSPARSER_H_
#define FLATBUFFERS_GENERATED_CLIENT_CROSSPARSER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace CrossParser {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

struct ClientVec;
struct ClientVecBuilder;

enum ClientUnion : uint8_t {
  ClientUnion_NONE = 0,
  ClientUnion_Person = 1,
  ClientUnion_Group = 2,
  ClientUnion_MIN = ClientUnion_NONE,
  ClientUnion_MAX = ClientUnion_Group
};

inline const ClientUnion (&EnumValuesClientUnion())[3] {
  static const ClientUnion values[] = {
    ClientUnion_NONE,
    ClientUnion_Person,
    ClientUnion_Group
  };
  return values;
}

inline const char * const *EnumNamesClientUnion() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameClientUnion(ClientUnion e) {
  if (::flatbuffers::IsOutRange(e, ClientUnion_NONE, ClientUnion_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClientUnion()[index];
}

template<typename T> struct ClientUnionTraits {
  static const ClientUnion enum_value = ClientUnion_NONE;
};

template<> struct ClientUnionTraits<CrossParser::Person> {
  static const ClientUnion enum_value = ClientUnion_Person;
};

template<> struct ClientUnionTraits<CrossParser::Group> {
  static const ClientUnion enum_value = ClientUnion_Group;
};

bool VerifyClientUnion(::flatbuffers::Verifier &verifier, const void *obj, ClientUnion type);
bool VerifyClientUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_AGE = 6,
    VT_WEIGHT = 8,
    VT_GENDER = 10
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  double age() const {
    return GetField<double>(VT_AGE, 0.0);
  }
  double weight() const {
    return GetField<double>(VT_WEIGHT, 0.0);
  }
  const ::flatbuffers::String *gender() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GENDER);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<double>(verifier, VT_AGE, 8) &&
           VerifyField<double>(verifier, VT_WEIGHT, 8) &&
           VerifyOffset(verifier, VT_GENDER) &&
           verifier.VerifyString(gender()) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Person::VT_NAME, name);
  }
  void add_age(double age) {
    fbb_.AddElement<double>(Person::VT_AGE, age, 0.0);
  }
  void add_weight(double weight) {
    fbb_.AddElement<double>(Person::VT_WEIGHT, weight, 0.0);
  }
  void add_gender(::flatbuffers::Offset<::flatbuffers::String> gender) {
    fbb_.AddOffset(Person::VT_GENDER, gender);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    double age = 0.0,
    double weight = 0.0,
    ::flatbuffers::Offset<::flatbuffers::String> gender = 0) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_age(age);
  builder_.add_gender(gender);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Person> CreatePersonDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    double age = 0.0,
    double weight = 0.0,
    const char *gender = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto gender__ = gender ? _fbb.CreateString(gender) : 0;
  return CrossParser::CreatePerson(
      _fbb,
      name__,
      age,
      weight,
      gender__);
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUP_NAME = 4,
    VT_AVG_AGE = 6,
    VT_AVG_WEIGHT = 8,
    VT_PERSON_NAMES = 10
  };
  const ::flatbuffers::String *group_name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_GROUP_NAME);
  }
  double avg_age() const {
    return GetField<double>(VT_AVG_AGE, 0.0);
  }
  double avg_weight() const {
    return GetField<double>(VT_AVG_WEIGHT, 0.0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *person_names() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PERSON_NAMES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUP_NAME) &&
           verifier.VerifyString(group_name()) &&
           VerifyField<double>(verifier, VT_AVG_AGE, 8) &&
           VerifyField<double>(verifier, VT_AVG_WEIGHT, 8) &&
           VerifyOffset(verifier, VT_PERSON_NAMES) &&
           verifier.VerifyVector(person_names()) &&
           verifier.VerifyVectorOfStrings(person_names()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_group_name(::flatbuffers::Offset<::flatbuffers::String> group_name) {
    fbb_.AddOffset(Group::VT_GROUP_NAME, group_name);
  }
  void add_avg_age(double avg_age) {
    fbb_.AddElement<double>(Group::VT_AVG_AGE, avg_age, 0.0);
  }
  void add_avg_weight(double avg_weight) {
    fbb_.AddElement<double>(Group::VT_AVG_WEIGHT, avg_weight, 0.0);
  }
  void add_person_names(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> person_names) {
    fbb_.AddOffset(Group::VT_PERSON_NAMES, person_names);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> group_name = 0,
    double avg_age = 0.0,
    double avg_weight = 0.0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> person_names = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  builder_.add_person_names(person_names);
  builder_.add_group_name(group_name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *group_name = nullptr,
    double avg_age = 0.0,
    double avg_weight = 0.0,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *person_names = nullptr) {
  auto group_name__ = group_name ? _fbb.CreateString(group_name) : 0;
  auto person_names__ = person_names ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*person_names) : 0;
  return CrossParser::CreateGroup(
      _fbb,
      group_name__,
      avg_age,
      avg_weight,
      person_names__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_ELEM_TYPE = 4,
    VT_CLIENT_ELEM = 6
  };
  CrossParser::ClientUnion client_elem_type() const {
    return static_cast<CrossParser::ClientUnion>(GetField<uint8_t>(VT_CLIENT_ELEM_TYPE, 0));
  }
  const void *client_elem() const {
    return GetPointer<const void *>(VT_CLIENT_ELEM);
  }
  template<typename T> const T *client_elem_as() const;
  const CrossParser::Person *client_elem_as_Person() const {
    return client_elem_type() == CrossParser::ClientUnion_Person ? static_cast<const CrossParser::Person *>(client_elem()) : nullptr;
  }
  const CrossParser::Group *client_elem_as_Group() const {
    return client_elem_type() == CrossParser::ClientUnion_Group ? static_cast<const CrossParser::Group *>(client_elem()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_CLIENT_ELEM_TYPE, 1) &&
           VerifyOffset(verifier, VT_CLIENT_ELEM) &&
           VerifyClientUnion(verifier, client_elem(), client_elem_type()) &&
           verifier.EndTable();
  }
};

template<> inline const CrossParser::Person *Client::client_elem_as<CrossParser::Person>() const {
  return client_elem_as_Person();
}

template<> inline const CrossParser::Group *Client::client_elem_as<CrossParser::Group>() const {
  return client_elem_as_Group();
}

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_elem_type(CrossParser::ClientUnion client_elem_type) {
    fbb_.AddElement<uint8_t>(Client::VT_CLIENT_ELEM_TYPE, static_cast<uint8_t>(client_elem_type), 0);
  }
  void add_client_elem(::flatbuffers::Offset<void> client_elem) {
    fbb_.AddOffset(Client::VT_CLIENT_ELEM, client_elem);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    CrossParser::ClientUnion client_elem_type = CrossParser::ClientUnion_NONE,
    ::flatbuffers::Offset<void> client_elem = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_client_elem(client_elem);
  builder_.add_client_elem_type(client_elem_type);
  return builder_.Finish();
}

struct ClientVec FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientVecBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT_VEC = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<CrossParser::Client>> *client_vec() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<CrossParser::Client>> *>(VT_CLIENT_VEC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT_VEC) &&
           verifier.VerifyVector(client_vec()) &&
           verifier.VerifyVectorOfTables(client_vec()) &&
           verifier.EndTable();
  }
};

struct ClientVecBuilder {
  typedef ClientVec Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_client_vec(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CrossParser::Client>>> client_vec) {
    fbb_.AddOffset(ClientVec::VT_CLIENT_VEC, client_vec);
  }
  explicit ClientVecBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ClientVec> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ClientVec>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ClientVec> CreateClientVec(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<CrossParser::Client>>> client_vec = 0) {
  ClientVecBuilder builder_(_fbb);
  builder_.add_client_vec(client_vec);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ClientVec> CreateClientVecDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<CrossParser::Client>> *client_vec = nullptr) {
  auto client_vec__ = client_vec ? _fbb.CreateVector<::flatbuffers::Offset<CrossParser::Client>>(*client_vec) : 0;
  return CrossParser::CreateClientVec(
      _fbb,
      client_vec__);
}

inline bool VerifyClientUnion(::flatbuffers::Verifier &verifier, const void *obj, ClientUnion type) {
  switch (type) {
    case ClientUnion_NONE: {
      return true;
    }
    case ClientUnion_Person: {
      auto ptr = reinterpret_cast<const CrossParser::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case ClientUnion_Group: {
      auto ptr = reinterpret_cast<const CrossParser::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyClientUnionVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyClientUnion(
        verifier,  values->Get(i), types->GetEnum<ClientUnion>(i))) {
      return false;
    }
  }
  return true;
}

inline const CrossParser::ClientVec *GetClientVec(const void *buf) {
  return ::flatbuffers::GetRoot<CrossParser::ClientVec>(buf);
}

inline const CrossParser::ClientVec *GetSizePrefixedClientVec(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<CrossParser::ClientVec>(buf);
}

inline bool VerifyClientVecBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<CrossParser::ClientVec>(nullptr);
}

inline bool VerifySizePrefixedClientVecBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<CrossParser::ClientVec>(nullptr);
}

inline void FinishClientVecBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CrossParser::ClientVec> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientVecBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<CrossParser::ClientVec> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace CrossParser

#endif  // FLATBUFFERS_GENERATED_CLIENT_CROSSPARSER_H_
